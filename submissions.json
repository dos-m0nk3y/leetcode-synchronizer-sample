[
  {
    "id": 1,
    "title": "Two Sum",
    "title_slug": "two-sum",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table"
    ]
  },
  {
    "id": 2,
    "title": "Add Two Numbers",
    "title_slug": "add-two-numbers",
    "difficulty": "Medium",
    "skills": [
      "Linked List",
      "Math",
      "Recursion"
    ]
  },
  {
    "id": 3,
    "title": "Longest Substring Without Repeating Characters",
    "title_slug": "longest-substring-without-repeating-characters",
    "difficulty": "Medium",
    "skills": [
      "Hash Table",
      "Sliding Window",
      "String"
    ]
  },
  {
    "id": 9,
    "title": "Palindrome Number",
    "title_slug": "palindrome-number",
    "difficulty": "Easy",
    "skills": [
      "Math"
    ]
  },
  {
    "id": 13,
    "title": "Roman to Integer",
    "title_slug": "roman-to-integer",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "Math",
      "String"
    ]
  },
  {
    "id": 14,
    "title": "Longest Common Prefix",
    "title_slug": "longest-common-prefix",
    "difficulty": "Easy",
    "skills": [
      "String",
      "Trie"
    ]
  },
  {
    "id": 20,
    "title": "Valid Parentheses",
    "title_slug": "valid-parentheses",
    "difficulty": "Easy",
    "skills": [
      "Stack",
      "String"
    ]
  },
  {
    "id": 21,
    "title": "Merge Two Sorted Lists",
    "title_slug": "merge-two-sorted-lists",
    "difficulty": "Easy",
    "skills": [
      "Linked List",
      "Recursion"
    ]
  },
  {
    "id": 26,
    "title": "Remove Duplicates from Sorted Array",
    "title_slug": "remove-duplicates-from-sorted-array",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Two Pointers"
    ]
  },
  {
    "id": 27,
    "title": "Remove Element",
    "title_slug": "remove-element",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Two Pointers"
    ]
  },
  {
    "id": 28,
    "title": "Find the Index of the First Occurrence in a String",
    "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
    "difficulty": "Easy",
    "skills": [
      "String",
      "String Matching",
      "Two Pointers"
    ]
  },
  {
    "id": 35,
    "title": "Search Insert Position",
    "title_slug": "search-insert-position",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Binary Search"
    ]
  },
  {
    "id": 58,
    "title": "Length of Last Word",
    "title_slug": "length-of-last-word",
    "difficulty": "Easy",
    "skills": [
      "String"
    ]
  },
  {
    "id": 66,
    "title": "Plus One",
    "title_slug": "plus-one",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Math"
    ]
  },
  {
    "id": 67,
    "title": "Add Binary",
    "title_slug": "add-binary",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Math",
      "Simulation",
      "String"
    ]
  },
  {
    "id": 69,
    "title": "Sqrt(x)",
    "title_slug": "sqrtx",
    "difficulty": "Easy",
    "skills": [
      "Binary Search",
      "Math"
    ]
  },
  {
    "id": 70,
    "title": "Climbing Stairs",
    "title_slug": "climbing-stairs",
    "difficulty": "Easy",
    "skills": [
      "Dynamic Programming",
      "Math",
      "Memoization"
    ]
  },
  {
    "id": 83,
    "title": "Remove Duplicates from Sorted List",
    "title_slug": "remove-duplicates-from-sorted-list",
    "difficulty": "Easy",
    "skills": [
      "Linked List"
    ]
  },
  {
    "id": 88,
    "title": "Merge Sorted Array",
    "title_slug": "merge-sorted-array",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Sorting",
      "Two Pointers"
    ]
  },
  {
    "id": 94,
    "title": "Binary Tree Inorder Traversal",
    "title_slug": "binary-tree-inorder-traversal",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 100,
    "title": "Same Tree",
    "title_slug": "same-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 101,
    "title": "Symmetric Tree",
    "title_slug": "symmetric-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 104,
    "title": "Maximum Depth of Binary Tree",
    "title_slug": "maximum-depth-of-binary-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 108,
    "title": "Convert Sorted Array to Binary Search Tree",
    "title_slug": "convert-sorted-array-to-binary-search-tree",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Binary Search Tree",
      "Binary Tree",
      "Divide and Conquer",
      "Tree"
    ]
  },
  {
    "id": 110,
    "title": "Balanced Binary Tree",
    "title_slug": "balanced-binary-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 111,
    "title": "Minimum Depth of Binary Tree",
    "title_slug": "minimum-depth-of-binary-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 112,
    "title": "Path Sum",
    "title_slug": "path-sum",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 118,
    "title": "Pascal's Triangle",
    "title_slug": "pascals-triangle",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Dynamic Programming"
    ]
  },
  {
    "id": 119,
    "title": "Pascal's Triangle II",
    "title_slug": "pascals-triangle-ii",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Dynamic Programming"
    ]
  },
  {
    "id": 121,
    "title": "Best Time to Buy and Sell Stock",
    "title_slug": "best-time-to-buy-and-sell-stock",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Dynamic Programming"
    ]
  },
  {
    "id": 125,
    "title": "Valid Palindrome",
    "title_slug": "valid-palindrome",
    "difficulty": "Easy",
    "skills": [
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 136,
    "title": "Single Number",
    "title_slug": "single-number",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Bit Manipulation"
    ]
  },
  {
    "id": 141,
    "title": "Linked List Cycle",
    "title_slug": "linked-list-cycle",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ]
  },
  {
    "id": 144,
    "title": "Binary Tree Preorder Traversal",
    "title_slug": "binary-tree-preorder-traversal",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 145,
    "title": "Binary Tree Postorder Traversal",
    "title_slug": "binary-tree-postorder-traversal",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 157,
    "title": "Read N Characters Given Read4",
    "title_slug": "read-n-characters-given-read4",
    "difficulty": "Easy",
    "skills": [
      "Interactive",
      "Simulation",
      "String"
    ]
  },
  {
    "id": 160,
    "title": "Intersection of Two Linked Lists",
    "title_slug": "intersection-of-two-linked-lists",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ]
  },
  {
    "id": 163,
    "title": "Missing Ranges",
    "title_slug": "missing-ranges",
    "difficulty": "Easy",
    "skills": [
      "Array"
    ]
  },
  {
    "id": 168,
    "title": "Excel Sheet Column Title",
    "title_slug": "excel-sheet-column-title",
    "difficulty": "Easy",
    "skills": [
      "Math",
      "String"
    ]
  },
  {
    "id": 169,
    "title": "Majority Element",
    "title_slug": "majority-element",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Counting",
      "Divide and Conquer",
      "Hash Table",
      "Sorting"
    ]
  },
  {
    "id": 170,
    "title": "Two Sum III - Data structure design",
    "title_slug": "two-sum-iii-data-structure-design",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Data Stream",
      "Design",
      "Hash Table",
      "Two Pointers"
    ]
  },
  {
    "id": 171,
    "title": "Excel Sheet Column Number",
    "title_slug": "excel-sheet-column-number",
    "difficulty": "Easy",
    "skills": [
      "Math",
      "String"
    ]
  },
  {
    "id": 175,
    "title": "Combine Two Tables",
    "title_slug": "combine-two-tables",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 181,
    "title": "Employees Earning More Than Their Managers",
    "title_slug": "employees-earning-more-than-their-managers",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 182,
    "title": "Duplicate Emails",
    "title_slug": "duplicate-emails",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 183,
    "title": "Customers Who Never Order",
    "title_slug": "customers-who-never-order",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 190,
    "title": "Reverse Bits",
    "title_slug": "reverse-bits",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Divide and Conquer"
    ]
  },
  {
    "id": 191,
    "title": "Number of 1 Bits",
    "title_slug": "number-of-1-bits",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Divide and Conquer"
    ]
  },
  {
    "id": 193,
    "title": "Valid Phone Numbers",
    "title_slug": "valid-phone-numbers",
    "difficulty": "Easy",
    "skills": [
      "Shell"
    ]
  },
  {
    "id": 195,
    "title": "Tenth Line",
    "title_slug": "tenth-line",
    "difficulty": "Easy",
    "skills": [
      "Shell"
    ]
  },
  {
    "id": 196,
    "title": "Delete Duplicate Emails",
    "title_slug": "delete-duplicate-emails",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 197,
    "title": "Rising Temperature",
    "title_slug": "rising-temperature",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 202,
    "title": "Happy Number",
    "title_slug": "happy-number",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "Math",
      "Two Pointers"
    ]
  },
  {
    "id": 203,
    "title": "Remove Linked List Elements",
    "title_slug": "remove-linked-list-elements",
    "difficulty": "Easy",
    "skills": [
      "Linked List",
      "Recursion"
    ]
  },
  {
    "id": 205,
    "title": "Isomorphic Strings",
    "title_slug": "isomorphic-strings",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "String"
    ]
  },
  {
    "id": 206,
    "title": "Reverse Linked List",
    "title_slug": "reverse-linked-list",
    "difficulty": "Easy",
    "skills": [
      "Linked List",
      "Recursion"
    ]
  },
  {
    "id": 217,
    "title": "Contains Duplicate",
    "title_slug": "contains-duplicate",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table",
      "Sorting"
    ]
  },
  {
    "id": 219,
    "title": "Contains Duplicate II",
    "title_slug": "contains-duplicate-ii",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ]
  },
  {
    "id": 225,
    "title": "Implement Stack using Queues",
    "title_slug": "implement-stack-using-queues",
    "difficulty": "Easy",
    "skills": [
      "Design",
      "Queue",
      "Stack"
    ]
  },
  {
    "id": 226,
    "title": "Invert Binary Tree",
    "title_slug": "invert-binary-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 228,
    "title": "Summary Ranges",
    "title_slug": "summary-ranges",
    "difficulty": "Easy",
    "skills": [
      "Array"
    ]
  },
  {
    "id": 231,
    "title": "Power of Two",
    "title_slug": "power-of-two",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Math",
      "Recursion"
    ]
  },
  {
    "id": 232,
    "title": "Implement Queue using Stacks",
    "title_slug": "implement-queue-using-stacks",
    "difficulty": "Easy",
    "skills": [
      "Design",
      "Queue",
      "Stack"
    ]
  },
  {
    "id": 234,
    "title": "Palindrome Linked List",
    "title_slug": "palindrome-linked-list",
    "difficulty": "Easy",
    "skills": [
      "Linked List",
      "Recursion",
      "Stack",
      "Two Pointers"
    ]
  },
  {
    "id": 242,
    "title": "Valid Anagram",
    "title_slug": "valid-anagram",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "Sorting",
      "String"
    ]
  },
  {
    "id": 243,
    "title": "Shortest Word Distance",
    "title_slug": "shortest-word-distance",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "String"
    ]
  },
  {
    "id": 246,
    "title": "Strobogrammatic Number",
    "title_slug": "strobogrammatic-number",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 252,
    "title": "Meeting Rooms",
    "title_slug": "meeting-rooms",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Sorting"
    ]
  },
  {
    "id": 257,
    "title": "Binary Tree Paths",
    "title_slug": "binary-tree-paths",
    "difficulty": "Easy",
    "skills": [
      "Backtracking",
      "Binary Tree",
      "Depth-First Search",
      "String",
      "Tree"
    ]
  },
  {
    "id": 258,
    "title": "Add Digits",
    "title_slug": "add-digits",
    "difficulty": "Easy",
    "skills": [
      "Math",
      "Number Theory",
      "Simulation"
    ]
  },
  {
    "id": 263,
    "title": "Ugly Number",
    "title_slug": "ugly-number",
    "difficulty": "Easy",
    "skills": [
      "Math"
    ]
  },
  {
    "id": 266,
    "title": "Palindrome Permutation",
    "title_slug": "palindrome-permutation",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Hash Table",
      "String"
    ]
  },
  {
    "id": 268,
    "title": "Missing Number",
    "title_slug": "missing-number",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Binary Search",
      "Bit Manipulation",
      "Hash Table",
      "Math",
      "Sorting"
    ]
  },
  {
    "id": 270,
    "title": "Closest Binary Search Tree Value",
    "title_slug": "closest-binary-search-tree-value",
    "difficulty": "Easy",
    "skills": [
      "Binary Search",
      "Binary Search Tree",
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 278,
    "title": "First Bad Version",
    "title_slug": "first-bad-version",
    "difficulty": "Easy",
    "skills": [
      "Binary Search",
      "Interactive"
    ]
  },
  {
    "id": 283,
    "title": "Move Zeroes",
    "title_slug": "move-zeroes",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Two Pointers"
    ]
  },
  {
    "id": 290,
    "title": "Word Pattern",
    "title_slug": "word-pattern",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "String"
    ]
  },
  {
    "id": 292,
    "title": "Nim Game",
    "title_slug": "nim-game",
    "difficulty": "Easy",
    "skills": [
      "Brainteaser",
      "Game Theory",
      "Math"
    ]
  },
  {
    "id": 293,
    "title": "Flip Game",
    "title_slug": "flip-game",
    "difficulty": "Easy",
    "skills": [
      "String"
    ]
  },
  {
    "id": 303,
    "title": "Range Sum Query - Immutable",
    "title_slug": "range-sum-query-immutable",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Design",
      "Prefix Sum"
    ]
  },
  {
    "id": 326,
    "title": "Power of Three",
    "title_slug": "power-of-three",
    "difficulty": "Easy",
    "skills": [
      "Math",
      "Recursion"
    ]
  },
  {
    "id": 338,
    "title": "Counting Bits",
    "title_slug": "counting-bits",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Dynamic Programming"
    ]
  },
  {
    "id": 342,
    "title": "Power of Four",
    "title_slug": "power-of-four",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Math",
      "Recursion"
    ]
  },
  {
    "id": 344,
    "title": "Reverse String",
    "title_slug": "reverse-string",
    "difficulty": "Easy",
    "skills": [
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 345,
    "title": "Reverse Vowels of a String",
    "title_slug": "reverse-vowels-of-a-string",
    "difficulty": "Easy",
    "skills": [
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 346,
    "title": "Moving Average from Data Stream",
    "title_slug": "moving-average-from-data-stream",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Data Stream",
      "Design",
      "Queue"
    ]
  },
  {
    "id": 349,
    "title": "Intersection of Two Arrays",
    "title_slug": "intersection-of-two-arrays",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Binary Search",
      "Hash Table",
      "Sorting",
      "Two Pointers"
    ]
  },
  {
    "id": 350,
    "title": "Intersection of Two Arrays II",
    "title_slug": "intersection-of-two-arrays-ii",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Binary Search",
      "Hash Table",
      "Sorting",
      "Two Pointers"
    ]
  },
  {
    "id": 359,
    "title": "Logger Rate Limiter",
    "title_slug": "logger-rate-limiter",
    "difficulty": "Easy",
    "skills": [
      "Design",
      "Hash Table"
    ]
  },
  {
    "id": 367,
    "title": "Valid Perfect Square",
    "title_slug": "valid-perfect-square",
    "difficulty": "Easy",
    "skills": [
      "Binary Search",
      "Math"
    ]
  },
  {
    "id": 374,
    "title": "Guess Number Higher or Lower",
    "title_slug": "guess-number-higher-or-lower",
    "difficulty": "Easy",
    "skills": [
      "Binary Search",
      "Interactive"
    ]
  },
  {
    "id": 383,
    "title": "Ransom Note",
    "title_slug": "ransom-note",
    "difficulty": "Easy",
    "skills": [
      "Counting",
      "Hash Table",
      "String"
    ]
  },
  {
    "id": 387,
    "title": "First Unique Character in a String",
    "title_slug": "first-unique-character-in-a-string",
    "difficulty": "Easy",
    "skills": [
      "Counting",
      "Hash Table",
      "Queue",
      "String"
    ]
  },
  {
    "id": 389,
    "title": "Find the Difference",
    "title_slug": "find-the-difference",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Hash Table",
      "Sorting",
      "String"
    ]
  },
  {
    "id": 392,
    "title": "Is Subsequence",
    "title_slug": "is-subsequence",
    "difficulty": "Easy",
    "skills": [
      "Dynamic Programming",
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 401,
    "title": "Binary Watch",
    "title_slug": "binary-watch",
    "difficulty": "Easy",
    "skills": [
      "Backtracking",
      "Bit Manipulation"
    ]
  },
  {
    "id": 404,
    "title": "Sum of Left Leaves",
    "title_slug": "sum-of-left-leaves",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 405,
    "title": "Convert a Number to Hexadecimal",
    "title_slug": "convert-a-number-to-hexadecimal",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation",
      "Math"
    ]
  },
  {
    "id": 408,
    "title": "Valid Word Abbreviation",
    "title_slug": "valid-word-abbreviation",
    "difficulty": "Easy",
    "skills": [
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 409,
    "title": "Longest Palindrome",
    "title_slug": "longest-palindrome",
    "difficulty": "Easy",
    "skills": [
      "Greedy",
      "Hash Table",
      "String"
    ]
  },
  {
    "id": 412,
    "title": "Fizz Buzz",
    "title_slug": "fizz-buzz",
    "difficulty": "Easy",
    "skills": [
      "Math",
      "Simulation",
      "String"
    ]
  },
  {
    "id": 414,
    "title": "Third Maximum Number",
    "title_slug": "third-maximum-number",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Sorting"
    ]
  },
  {
    "id": 415,
    "title": "Add Strings",
    "title_slug": "add-strings",
    "difficulty": "Easy",
    "skills": [
      "Math",
      "Simulation",
      "String"
    ]
  },
  {
    "id": 422,
    "title": "Valid Word Square",
    "title_slug": "valid-word-square",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Matrix"
    ]
  },
  {
    "id": 434,
    "title": "Number of Segments in a String",
    "title_slug": "number-of-segments-in-a-string",
    "difficulty": "Easy",
    "skills": [
      "String"
    ]
  },
  {
    "id": 441,
    "title": "Arranging Coins",
    "title_slug": "arranging-coins",
    "difficulty": "Easy",
    "skills": [
      "Binary Search",
      "Math"
    ]
  },
  {
    "id": 448,
    "title": "Find All Numbers Disappeared in an Array",
    "title_slug": "find-all-numbers-disappeared-in-an-array",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table"
    ]
  },
  {
    "id": 455,
    "title": "Assign Cookies",
    "title_slug": "assign-cookies",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Greedy",
      "Sorting",
      "Two Pointers"
    ]
  },
  {
    "id": 459,
    "title": "Repeated Substring Pattern",
    "title_slug": "repeated-substring-pattern",
    "difficulty": "Easy",
    "skills": [
      "String",
      "String Matching"
    ]
  },
  {
    "id": 461,
    "title": "Hamming Distance",
    "title_slug": "hamming-distance",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation"
    ]
  },
  {
    "id": 463,
    "title": "Island Perimeter",
    "title_slug": "island-perimeter",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix"
    ]
  },
  {
    "id": 476,
    "title": "Number Complement",
    "title_slug": "number-complement",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation"
    ]
  },
  {
    "id": 482,
    "title": "License Key Formatting",
    "title_slug": "license-key-formatting",
    "difficulty": "Easy",
    "skills": [
      "String"
    ]
  },
  {
    "id": 485,
    "title": "Max Consecutive Ones",
    "title_slug": "max-consecutive-ones",
    "difficulty": "Easy",
    "skills": [
      "Array"
    ]
  },
  {
    "id": 492,
    "title": "Construct the Rectangle",
    "title_slug": "construct-the-rectangle",
    "difficulty": "Easy",
    "skills": [
      "Math"
    ]
  },
  {
    "id": 495,
    "title": "Teemo Attacking",
    "title_slug": "teemo-attacking",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Simulation"
    ]
  },
  {
    "id": 496,
    "title": "Next Greater Element I",
    "title_slug": "next-greater-element-i",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table",
      "Monotonic Stack",
      "Stack"
    ]
  },
  {
    "id": 500,
    "title": "Keyboard Row",
    "title_slug": "keyboard-row",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table",
      "String"
    ]
  },
  {
    "id": 501,
    "title": "Find Mode in Binary Search Tree",
    "title_slug": "find-mode-in-binary-search-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Search Tree",
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 504,
    "title": "Base 7",
    "title_slug": "base-7",
    "difficulty": "Easy",
    "skills": [
      "Math"
    ]
  },
  {
    "id": 506,
    "title": "Relative Ranks",
    "title_slug": "relative-ranks",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Heap (Priority Queue)",
      "Sorting"
    ]
  },
  {
    "id": 507,
    "title": "Perfect Number",
    "title_slug": "perfect-number",
    "difficulty": "Easy",
    "skills": [
      "Math"
    ]
  },
  {
    "id": 509,
    "title": "Fibonacci Number",
    "title_slug": "fibonacci-number",
    "difficulty": "Easy",
    "skills": [
      "Dynamic Programming",
      "Math",
      "Memoization",
      "Recursion"
    ]
  },
  {
    "id": 511,
    "title": "Game Play Analysis I",
    "title_slug": "game-play-analysis-i",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 512,
    "title": "Game Play Analysis II",
    "title_slug": "game-play-analysis-ii",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 520,
    "title": "Detect Capital",
    "title_slug": "detect-capital",
    "difficulty": "Easy",
    "skills": [
      "String"
    ]
  },
  {
    "id": 521,
    "title": "Longest Uncommon Subsequence I",
    "title_slug": "longest-uncommon-subsequence-i",
    "difficulty": "Easy",
    "skills": [
      "String"
    ]
  },
  {
    "id": 530,
    "title": "Minimum Absolute Difference in BST",
    "title_slug": "minimum-absolute-difference-in-bst",
    "difficulty": "Easy",
    "skills": [
      "Binary Search Tree",
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 541,
    "title": "Reverse String II",
    "title_slug": "reverse-string-ii",
    "difficulty": "Easy",
    "skills": [
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 543,
    "title": "Diameter of Binary Tree",
    "title_slug": "diameter-of-binary-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 551,
    "title": "Student Attendance Record I",
    "title_slug": "student-attendance-record-i",
    "difficulty": "Easy",
    "skills": [
      "String"
    ]
  },
  {
    "id": 557,
    "title": "Reverse Words in a String III",
    "title_slug": "reverse-words-in-a-string-iii",
    "difficulty": "Easy",
    "skills": [
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 559,
    "title": "Maximum Depth of N-ary Tree",
    "title_slug": "maximum-depth-of-n-ary-tree",
    "difficulty": "Easy",
    "skills": [
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 561,
    "title": "Array Partition",
    "title_slug": "array-partition",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Counting Sort",
      "Greedy",
      "Sorting"
    ]
  },
  {
    "id": 563,
    "title": "Binary Tree Tilt",
    "title_slug": "binary-tree-tilt",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 566,
    "title": "Reshape the Matrix",
    "title_slug": "reshape-the-matrix",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Matrix",
      "Simulation"
    ]
  },
  {
    "id": 572,
    "title": "Subtree of Another Tree",
    "title_slug": "subtree-of-another-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Hash Function",
      "String Matching",
      "Tree"
    ]
  },
  {
    "id": 575,
    "title": "Distribute Candies",
    "title_slug": "distribute-candies",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table"
    ]
  },
  {
    "id": 577,
    "title": "Employee Bonus",
    "title_slug": "employee-bonus",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 584,
    "title": "Find Customer Referee",
    "title_slug": "find-customer-referee",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 586,
    "title": "Customer Placing the Largest Number of Orders",
    "title_slug": "customer-placing-the-largest-number-of-orders",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  },
  {
    "id": 589,
    "title": "N-ary Tree Preorder Traversal",
    "title_slug": "n-ary-tree-preorder-traversal",
    "difficulty": "Easy",
    "skills": [
      "Depth-First Search",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 590,
    "title": "N-ary Tree Postorder Traversal",
    "title_slug": "n-ary-tree-postorder-traversal",
    "difficulty": "Easy",
    "skills": [
      "Depth-First Search",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 594,
    "title": "Longest Harmonious Subsequence",
    "title_slug": "longest-harmonious-subsequence",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table",
      "Sorting"
    ]
  },
  {
    "id": 595,
    "title": "Big Countries",
    "title_slug": "big-countries",
    "difficulty": "Easy",
    "skills": [
      "Database"
    ]
  }
]